# -*- coding: utf-8 -*-
"""Assignment 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cggk9HcjBT7r-WIS-MpjMcZrXP94xCim

# **Assignment 1**
Επιβλεπόμενη μάθηση – Ταξινόμηση

*   Antonios Kagias
*   AIDA
*   aid23003@uom.edu.gr
*   aid23003
"""

# Load libraries
import pandas as pd
import numpy as np
import keras
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

# Change directory name!!!
df_companies = pd.read_excel(r'/content/drive/MyDrive/Colab Notebooks/AIDA/1ο Εξάμηνο/Dataset2Use_Assignment1.xlsx')
display(df_companies)

# Normalize the data in columns 1-8 by subtracting the minimum value and dividing by the range
df_companies.iloc[:, 0:7] = (df_companies.iloc[:, 0:7] - df_companies.iloc[:, 0:7].min()) / (df_companies.iloc[:, 0:7].max() - df_companies.iloc[:, 0:7].min())
display(df_companies)

# inputData with column L removed
inputData = df_companies.loc[:,df_companies.columns != 'ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)']

# outputData with column L
outputData = df_companies.loc[:,df_companies.columns == 'ΕΝΔΕΙΞΗ ΑΣΥΝΕΠΕΙΑΣ (=2) (ν+1)']

# split dataset: train = 80%, test = 20%
inputData_train, inputData_test = train_test_split(inputData, test_size=0.2, random_state=0)
outputData_train, outputData_test = train_test_split(outputData, test_size=0.2, random_state=0)

"""Linear Discriminant Analysis"""

lda = LinearDiscriminantAnalysis()

# fit the model
lda.fit(inputData_train, outputData_train.values.ravel())

# use trained classifier
lda_pred_train = lda.predict(inputData_train)
lda_pred_test = lda.predict(inputData_test)

"""Logistic Regression"""

logreg = LogisticRegression(max_iter = 400)

# fit the model
logreg.fit(inputData_train, outputData_train.values.ravel())

# use trained classifier
logreg_pred_train = logreg.predict(inputData_train)
logreg_pred_test = logreg.predict(inputData_test)

"""Decision Trees"""

dct = DecisionTreeClassifier()

# fit the model
dct.fit(inputData_train, outputData_train)

# use trained classifier
dct_pred_train = dct.predict(inputData_train)
dct_pred_test = dct.predict(inputData_test)

"""k-Nearest Neighbors"""

knn = KNeighborsClassifier(n_neighbors = 5)

# fit the model
knn.fit(inputData_train, outputData_train.values.ravel())

# use trained classifier
knn_pred_train = knn.predict(inputData_train)
knn_pred_test = knn.predict(inputData_test)

"""Naïve Bayes"""

gnb = GaussianNB()

# fit the model
gnb.fit(inputData_train, outputData_train.values.ravel())

# use trained classifier
gnb_pred_train = gnb.predict(inputData_train)
gnb_pred_test = gnb.predict(inputData_test)

"""Support Vector Machines"""

svm = SVC()

# fit the model
svm.fit(inputData_train, outputData_train.values.ravel())

# use trained classifier
svm_pred_train = svm.predict(inputData_train)
svm_pred_test = svm.predict(inputData_test)

"""Neural Networks"""

CustomModel = keras.models.Sequential()
CustomModel.add(keras.layers.Dense(16, input_dim=inputData_train.shape[1], activation='relu'))
CustomModel.add(keras.layers.Dense(3, activation='softmax'))

#compile model using accuracy to measure model performance
CustomModel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

#train the model
CustomModel.fit(inputData_train, keras.utils.np_utils.to_categorical(outputData_train.values.ravel()), epochs=100, verbose=False)

nn_pred_train = CustomModel.predict(inputData_train)
nn_pred_test = CustomModel.predict(inputData_test)

"""Calculating scores

---

Linear Discriminant Analysis
"""

acc_train = accuracy_score(outputData_train, lda_pred_train)
acc_test = accuracy_score(outputData_test, lda_pred_test)
pre_train = precision_score(outputData_train, lda_pred_train, average='macro')
pre_test = precision_score(outputData_test, lda_pred_test, average='macro')
rec_train = recall_score(outputData_train, lda_pred_train, average='macro')
rec_test = recall_score(outputData_test, lda_pred_test, average='macro')
f1_train = f1_score(outputData_train, lda_pred_train, average='macro')
f1_test = f1_score(outputData_test, lda_pred_test, average='macro')

# print the scores
print('Accuracy scores of <Linear Discriminant Analysis> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <Linear Discriminant Analysis> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <Linear Discriminant Analysis> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <Linear Discriminant Analysis> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Logistic Regression"""

acc_train = accuracy_score(outputData_train, logreg_pred_train)
acc_test = accuracy_score(outputData_test, logreg_pred_test)
pre_train = precision_score(outputData_train, logreg_pred_train, average='macro', labels=np.unique(logreg_pred_train))
pre_test = precision_score(outputData_test, logreg_pred_test, average='macro', labels=np.unique(logreg_pred_test))
rec_train = recall_score(outputData_train, logreg_pred_train, average='macro', labels=np.unique(logreg_pred_train))
rec_test = recall_score(outputData_test, logreg_pred_test, average='macro', labels=np.unique(logreg_pred_test))
f1_train = f1_score(outputData_train, logreg_pred_train, average='macro', labels=np.unique(logreg_pred_train))
f1_test = f1_score(outputData_test, logreg_pred_test, average='macro', labels=np.unique(logreg_pred_test))

# print the scores
print('Accuracy scores of <Logistic Regression> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <Logistic Regression> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <Logistic Regression> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <Logistic Regression> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Decision Trees"""

acc_train = accuracy_score(outputData_train, dct_pred_train)
acc_test = accuracy_score(outputData_test, dct_pred_test)
pre_train = precision_score(outputData_train, dct_pred_train, average='macro')
pre_test = precision_score(outputData_test, dct_pred_test, average='macro')
rec_train = recall_score(outputData_train, dct_pred_train, average='macro')
rec_test = recall_score(outputData_test, dct_pred_test, average='macro')
f1_train = f1_score(outputData_train, dct_pred_train, average='macro')
f1_test = f1_score(outputData_test, dct_pred_test, average='macro')

# print the scores
print('Accuracy scores of <Decision Trees> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <Decision Trees> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <Decision Trees> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <Decision Trees> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""k-Nearest Neighbors"""

acc_train = accuracy_score(outputData_train, knn_pred_train)
acc_test = accuracy_score(outputData_test, knn_pred_test)
pre_train = precision_score(outputData_train, knn_pred_train, average='macro')
pre_test = precision_score(outputData_test, knn_pred_test, average='macro')
rec_train = recall_score(outputData_train, knn_pred_train, average='macro')
rec_test = recall_score(outputData_test, knn_pred_test, average='macro')
f1_train = f1_score(outputData_train, knn_pred_train, average='macro')
f1_test = f1_score(outputData_test, knn_pred_test, average='macro')

# print the scores
print('Accuracy scores of <k-Nearest Neighbors> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <k-Nearest Neighbors> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <k-Nearest Neighbors> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <k-Nearest Neighbors> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Naïve Bayes"""

acc_train = accuracy_score(outputData_train, gnb_pred_train)
acc_test = accuracy_score(outputData_test, gnb_pred_test)
pre_train = precision_score(outputData_train, gnb_pred_train, average='macro')
pre_test = precision_score(outputData_test, gnb_pred_test, average='macro')
rec_train = recall_score(outputData_train, gnb_pred_train, average='macro')
rec_test = recall_score(outputData_test, gnb_pred_test, average='macro')
f1_train = f1_score(outputData_train, gnb_pred_train, average='macro')
f1_test = f1_score(outputData_test, gnb_pred_test, average='macro')

# print the scores
print('Accuracy scores of <Naïve Bayes> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <Naïve Bayes> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <Naïve Bayes> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <Naïve Bayes> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Support Vector Machines"""

acc_train = accuracy_score(outputData_train, svm_pred_train)
acc_test = accuracy_score(outputData_test, svm_pred_test)
pre_train = precision_score(outputData_train, svm_pred_train, average='macro', labels=np.unique(svm_pred_train))
pre_test = precision_score(outputData_test, svm_pred_test, average='macro', labels=np.unique(svm_pred_test))
rec_train = recall_score(outputData_train, svm_pred_train, average='macro', labels=np.unique(svm_pred_train))
rec_test = recall_score(outputData_test, svm_pred_test, average='macro', labels=np.unique(svm_pred_test))
f1_train = f1_score(outputData_train, svm_pred_train, average='macro', labels=np.unique(svm_pred_train))
f1_test = f1_score(outputData_test, svm_pred_test, average='macro', labels=np.unique(svm_pred_test))

# print the scores
print('Accuracy scores of <Support Vector Machines> classifier are:',
 'train: {:.2f}'.format(acc_train), 'and test: {:.2f}.'.format(acc_test))
print('Precision scores of <Support Vector Machines> classifier are:',
 'train: {:.2f}'.format(pre_train), 'and test: {:.2f}.'.format(pre_test))
print('Recall scores of <Support Vector Machines> classifier are:',
 'train: {:.2f}'.format(rec_train), 'and test: {:.2f}.'.format(rec_test))
print('F1 scores of <Support Vector Machines> classifier are:',
 'train: {:.2f}'.format(f1_train), 'and test: {:.2f}.'.format(f1_test))

"""Confusion matrices

---

Linear Discriminant Analysis
"""

lda_conf_matrix = confusion_matrix(outputData_train, lda_pred_train)
print(f"TP: {lda_conf_matrix[1][1]}")
print(f"TN: {lda_conf_matrix[0][0]}")
print(f"FP: {lda_conf_matrix[0][1]}")
print(f"FN: {lda_conf_matrix[1][0]}")

print("--------------")

lda_conf_matrix = confusion_matrix(outputData_test, lda_pred_test)
print(f"TP: {lda_conf_matrix[1][1]}")
print(f"TN: {lda_conf_matrix[0][0]}")
print(f"FP: {lda_conf_matrix[0][1]}")
print(f"FN: {lda_conf_matrix[1][0]}")

"""Logistic Regression"""

logreg_conf_matrix = confusion_matrix(outputData_test, logreg_pred_test)
print(f"TP: {logreg_conf_matrix[1][1]}")
print(f"TN: {logreg_conf_matrix[0][0]}")
print(f"FP: {logreg_conf_matrix[0][1]}")
print(f"FN: {logreg_conf_matrix[1][0]}")

print("--------------")

logreg_conf_matrix = confusion_matrix(outputData_train, logreg_pred_train)
print(f"TP: {logreg_conf_matrix[1][1]}")
print(f"TN: {logreg_conf_matrix[0][0]}")
print(f"FP: {logreg_conf_matrix[0][1]}")
print(f"FN: {logreg_conf_matrix[1][0]}")

"""Decision Trees"""

dct_conf_matrix = confusion_matrix(outputData_train, dct_pred_train)
print(f"TP: {dct_conf_matrix[1][1]}")
print(f"TN: {dct_conf_matrix[0][0]}")
print(f"FP: {dct_conf_matrix[0][1]}")
print(f"FN: {dct_conf_matrix[1][0]}")

print("--------------")

dct_conf_matrix = confusion_matrix(outputData_test, dct_pred_test)
print(f"TP: {dct_conf_matrix[1][1]}")
print(f"TN: {dct_conf_matrix[0][0]}")
print(f"FP: {dct_conf_matrix[0][1]}")
print(f"FN: {dct_conf_matrix[1][0]}")

"""k-Nearest Neighbors"""

knn_conf_matrix = confusion_matrix(outputData_test, knn_pred_test)
print(f"TP: {knn_conf_matrix[1][1]}")
print(f"TN: {knn_conf_matrix[0][0]}")
print(f"FP: {knn_conf_matrix[0][1]}")
print(f"FN: {knn_conf_matrix[1][0]}")

print("--------------")

knn_conf_matrix = confusion_matrix(outputData_train, knn_pred_train)
print(f"TP: {knn_conf_matrix[1][1]}")
print(f"TN: {knn_conf_matrix[0][0]}")
print(f"FP: {knn_conf_matrix[0][1]}")
print(f"FN: {knn_conf_matrix[1][0]}")

"""Naïve Bayes"""

gnb_conf_matrix = confusion_matrix(outputData_train, gnb_pred_train)
print(f"TP: {gnb_conf_matrix[1][1]}")
print(f"TN: {gnb_conf_matrix[0][0]}")
print(f"FP: {gnb_conf_matrix[0][1]}")
print(f"FN: {gnb_conf_matrix[1][0]}")

print("--------------")

gnb_conf_matrix = confusion_matrix(outputData_test, gnb_pred_test)
print(f"TP: {gnb_conf_matrix[1][1]}")
print(f"TN: {gnb_conf_matrix[0][0]}")
print(f"FP: {gnb_conf_matrix[0][1]}")
print(f"FN: {gnb_conf_matrix[1][0]}")

"""Support Vector Machines"""

svm_conf_matrix = confusion_matrix(outputData_test, svm_pred_test)
print(f"TP: {svm_conf_matrix[1][1]}")
print(f"TN: {svm_conf_matrix[0][0]}")
print(f"FP: {svm_conf_matrix[0][1]}")
print(f"FN: {svm_conf_matrix[1][0]}")

print("--------------")

svm_conf_matrix = confusion_matrix(outputData_train, svm_pred_train)
print(f"TP: {svm_conf_matrix[1][1]}")
print(f"TN: {svm_conf_matrix[0][0]}")
print(f"FP: {svm_conf_matrix[0][1]}")
print(f"FN: {svm_conf_matrix[1][0]}")

print(f"Number of non-healthy companies in training sample: {outputData_train.value_counts()[2]}")
print(f"Number of non-healthy companies in testing sample: {outputData_test.value_counts()[2]}")
